#!/usr/bin/env python

"""goaprs.py: Sync data from a Longitude database to APRS."""

import sqlite3
import argparse
import os
import telnetlib

from datetime import datetime
from operator import xor

def convertDegrees(coord):
    deg = int(coord)
    min = abs(coord - deg) * 60
    return [deg, min, '']

parser = argparse.ArgumentParser(description='Sync Longitude database with APRS')
parser.add_argument('--db', '-d', metavar='file', nargs='?', type=str, default='loc_db', dest='db_file', help='sqlite storage DB for storing waypoints')
parser.add_argument('--callsign', '-c', metavar='callsign', nargs='?', type=str, required=True, dest='callsign', help='amateur radio callsign')
parser.add_argument('--password', '-p', metavar='password', nargs='?', type=str, required=True, dest='password', help='APRS password')
parser.add_argument('--comment', '-C', metavar='comment', nargs='?', type=str, default='updated by GoAPRS - http://bit.ly/goaprs', dest='message', help='custom comment for APRS packet')
parser.add_argument('--host', '-H', metavar='hostname', nargs='?', type=str, default='noam.aprs2.net', dest='hostname', help='hostname for APRS connectivity')
parser.add_argument('-v', action='store_true', dest='verbose', help='be verbose')
args = parser.parse_args()

if(not os.path.isfile(args.db_file)):
    raise Exception("Database does not exist")
else:
    conn = sqlite3.connect(args.db_file)
    try:
        conn.execute('select * from tracks_location limit 1')
    except sqlite3.OperationalError:
        raise Exception('Unable to read from database, possible corruption?')

c = conn.cursor()

if(args.verbose):
    print 'Fetching newest location...\n'

c.execute('select * from tracks_location order by timestamp desc limit 1')
loc = c.fetchone()

if(args.verbose):
    print 'Building packet...\n'

lat = convertDegrees(loc[1])
lon = convertDegrees(loc[2])

if(lat[0] > 0):
    lat[2] = 'N'
else:
    lat[2] = 'S'
if(lon[0] < 0):
    lon[2] = 'W'
else:
    lon[2] = 'E'

#nmea_packet = '$GPRMC,%s.000,A,%02d%07.4f,%s,%03d%07.4f,%s,,,%s,,*' % (datetime.fromtimestamp(loc[0]/1000).strftime("%H%M%S"), abs(lat[0]), lat[1], lat[2], abs(lon[0]), lon[1], lon[2], datetime.fromtimestamp(loc[0]/1000).strftime("%d%m%y"))

# Calculate an NMEA packet checksum, http://blog.lucanatali.it/2006/12/nmea-checksum-in-python.html
#checksum = reduce(xor, map(ord, nmea_packet[1:nmea_packet.index('*')]))
#checksum = '%2.2X' % (checksum)
#aprs_nmea_packet = '%s-10>APZGOO,TCPIP*,qAC,%s:%s%sPants' % (args.callsign, args.callsign, nmea_packet, checksum)
#aprs_info_packet = '%s-10>APRS:>%s/%s - %s' % (args.callsign, datetime.fromtimestamp(loc[0]/1000).strftime('%d%H%M'), args.callsign, args.message)

# We are using the following features of the format:
#
# args.callsign-10                      the user's SSID, in this case the callsign plus the value 10, which corresponds to an APRS-IS device
# >APZG01,TCPIP*,qAC,args.callsign-10   we are directing the data to this person, via the APZG01 software on TCPIP, generated by the client, to the user's SSID
#       Note: APZ is the unassigned software field, G indicates this software, Google Latitude sync, and 01 indicates version 1.
# :/                                    begin the packet information, we are using a timestamp but don't support APRS messaging
# strftime('%H%M%S')                    timestamp
# <next section>                        format the position data
# $                                     indicate we wish to use the phone icon for our device (the previous / divider in the position data indicates using icon tileset 1)
# args.message                          the message for this packet the user wanted to bundle
# /A=000000                             altitude in feet (currently unused)

aprs_packet = '%s-10>APZG01,TCPIP*,qAC,%s-10:/%sh%02d%05.2f%s/%03d%05.2f%s$%s' % (args.callsign, args.callsign, datetime.fromtimestamp(loc[0]/1000).strftime('%H%M%S'), abs(lat[0]), lat[1], lat[2], abs(lon[0]), lon[1], lon[2], args.message)
aprs_info_packet = '%s-10>APZG01,TCPIP*,qAC,%s-10:>%s - Accurate to %d meters' % (args.callsign, args.callsign, args.callsign, loc[3])

if(args.verbose):
    print 'Connecting to APRS...\n'

tel = telnetlib.Telnet(args.hostname, 14580)

tel.read_until('#')
tel.write('user %s pass %s vers goaprs 0.1\n' % (args.callsign, args.password))

tel.read_until('logresp')
tel.read_until('verified')
if(args.verbose):
    print 'Logged in...\n'

#tel.write('%s\n' % (aprs_nmea_packet))
#tel.write('%s\n' % (aprs_info_packet))
tel.write('%s\r\n' % (aprs_packet))
tel.write('%s\r\n' % (aprs_info_packet))

if(args.verbose):
    print 'Packets written...\n'

tel.close()

if(args.verbose):
    print 'Done...\n'
